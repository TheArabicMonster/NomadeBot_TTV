/**
 * Script de migration des inventaires
 * 
 * Ce script transf√®re les inventaires du bot Twitch vers le syst√®me partag√©.
 */
const fs = require('fs');
const path = require('path');

// Chemin vers les fichiers d'inventaire
const OLD_INVENTORY_PATH = path.join(__dirname, '..', 'data', 'static', 'inventories.json');
const SHARED_INVENTORY_PATH = path.join(__dirname, '..', '..', 'NomadeBot_SHARED', 'data', 'static', 'inventories.json');

// V√©rification de l'existence du dossier partag√©
const sharedDir = path.join(__dirname, '..', '..', 'NomadeBot_SHARED', 'data', 'static');
if (!fs.existsSync(sharedDir)) {
  fs.mkdirSync(sharedDir, { recursive: true });
  console.log('üìÅ Dossier partag√© cr√©√©: ', sharedDir);
}

// Lecture des inventaires existants
let oldInventories = {};
if (fs.existsSync(OLD_INVENTORY_PATH)) {
  try {
    const data = fs.readFileSync(OLD_INVENTORY_PATH, 'utf8');
    oldInventories = JSON.parse(data);
    console.log(`‚úÖ ${Object.keys(oldInventories).length} inventaires charg√©s depuis le bot Twitch`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture des inventaires du bot Twitch:', error);
    process.exit(1);
  }
} else {
  console.log('‚ö†Ô∏è Aucun fichier d\'inventaires trouv√© pour le bot Twitch');
}

// Lecture des inventaires partag√©s existants
let sharedInventories = {};
if (fs.existsSync(SHARED_INVENTORY_PATH)) {
  try {
    const data = fs.readFileSync(SHARED_INVENTORY_PATH, 'utf8');
    sharedInventories = JSON.parse(data);
    console.log(`‚úÖ ${Object.keys(sharedInventories).length} inventaires d√©j√† pr√©sents dans le syst√®me partag√©`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture des inventaires partag√©s:', error);
    // Continuer avec un objet vide
  }
}

// Fusion des inventaires
for (const [userId, items] of Object.entries(oldInventories)) {
  if (sharedInventories[userId]) {
    console.log(`‚ö†Ô∏è L'utilisateur ${userId} existe d√©j√† dans le syst√®me partag√©. Fusion des inventaires...`);
    
    // Cr√©er un Set pour √©viter les doublons
    const uniqueItems = new Set([...sharedInventories[userId], ...items]);
    sharedInventories[userId] = Array.from(uniqueItems);
    
    console.log(`‚úÖ Inventaire de ${userId} fusionn√©: ${sharedInventories[userId].length} objets`);
  } else {
    sharedInventories[userId] = items;
    console.log(`‚úÖ Inventaire de ${userId} ajout√©: ${items.length} objets`);
  }
}

// Sauvegarde des inventaires dans le syst√®me partag√©
try {
  fs.writeFileSync(SHARED_INVENTORY_PATH, JSON.stringify(sharedInventories, null, 2));
  console.log(`‚úÖ ${Object.keys(sharedInventories).length} inventaires sauvegard√©s dans le syst√®me partag√©`);
} catch (error) {
  console.error('‚ùå Erreur lors de la sauvegarde des inventaires partag√©s:', error);
  process.exit(1);
}

console.log('‚úÖ Migration des inventaires termin√©e avec succ√®s!');